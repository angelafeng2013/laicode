//Given a singly-linked list, where each node contains an integer value, 
//sort it in ascending order. The merge sort algorithm should be used to solve this problem.

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  
  public ListNode mergeSort(ListNode head) {
    // Write your solution here
    if(head == null || head.next == null){
      return head;
    }
    ListNode mid = findMid(head); //q1
    ListNode second = mid.next;
    mid.next = null;
    
    ListNode left = mergeSort(head);
    ListNode right = mergeSort(second);
    
    return mergeSorted(left, right); //q4
  }
  private ListNode findMid(ListNode head){
    ListNode fast = head, slow = head;
    while ( fast != null && fast.next != null){
      fast = fast.next.next;
      slow = slow.next;
    }
    return slow;
  }
  private ListNode mergeSorted(ListNode one, ListNode two){
    ListNode dummy = new ListNode(0);
    ListNode cur = dummy;
    
    while(one != null && two != null){
      if(one.value < two.value){
        cur.next = one;
        one = one.next;
      }else{
        cur.next = two;
        two = two.next;
      }
      cur = cur.next;
    }
    if(one != null){
      cur.next = one;
    }else{
      cur.next = two;
    }
    return dummy.next;
  }
  
}

Time Complexity: O(n Log n)
