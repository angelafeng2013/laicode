/* 
Description
Given a string with no duplicate characters, return a list with all permutations of the characters.

Examples

Set = “abc”, all permutations are [“abc”, “acb”, “bac”, “bca”, “cab”, “cba”]
Set = "", all permutations are [""]
Set = null, all permutations are []
*/

public class Solution {
  public List<String> permutations(String set) {
    List<String> result = new ArrayList<String>();
    if( set == null){
      return result;
    }
    char[] array = set.toCharArray();
    permutation(array, 0, result);
    return result;
  }
  private void permutation(char[] input, int index, List<String> result){
    if(index == input.length){
      result.add(new String(input));
      return;
    }
    for(int i = index; i <input.length; i++){
      swap(input, index, i);
      permutation (input, index + 1, result);
      swap(input, index, i);
    }
  }
  private void swap(char[] array, int left, int right){
    char tmp = array[left];
    array[left] = array[right];
    array[right] = tmp;
  }
}
