//Check if a given binary tree is balanced. 
//A balanced binary tree is one in which the depths of every nodeâ€™s left and right subtree differ by at most 1.

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public boolean isBalanced(TreeNode root) {
    if (root == null) {
     return true;
   }
    int leftHeight = getHeight(root.left);
    int rightHeight = getHeight(root.right);
     if(Math.abs(leftHeight - rightHeight)>1){
      return false;
    }
    return isBalanced(root.left) && isBalanced(root.right);
  }  
   private int getHeight(TreeNode root){
      if (root == null) {
         return 0;
   }
     int leftHeight = getHeight(root.left);
     int rightHeight = getHeight(root.right);
     return Math.max(leftHeight,rightHeight)+1;
   }
    
}


height is log(n) level,
each level is n,
so the total time is O(nlogn)
