//Determine if a given binary tree is binary search tree.
//Assumptions

//There should no be duplicate keys in binary search tree.
//You can assume the keys stored in the binary search tree can not be Integer.MIN_VALUE or Integer.MAX_VALUE.

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public List<Integer> getRange(TreeNode root, int min, int max) {
    List<Integer> list = new ArrayList<Integer>();
    getRange(root, min, max, list);
    return list;
    
  }
  private void getRange(TreeNode root, int min, int max, List<Integer> list){
    if(root == null) {
      return ;
    }
     if (root.key > min) {
      getRange(root.left, min, max,list);
    }
    if (root.key <= max && root.key >= min){
      list.add(root.key);
    }
  
     if (root.key < max) {
      getRange(root.right, min, max,list);
    }
  }
}



time= O(n)
space = O(height)
