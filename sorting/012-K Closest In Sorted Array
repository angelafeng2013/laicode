package laioffer;

import java.util.Arrays;

public class KClosest {
	public int[] kClosest(int[] array, int target, int k) {
		if (array == null || array.length == 0) {
			return array;
		}
		if (k <= 0) {
			return new int[0];
		}
		int[] result = new int[k];
		int left = 0;
		int right = array.length - 1;
		while (left < right - 1) {
			int mid = left + (right - left) / 2;
			if (array[mid] <= target) {
				left = mid;
			} else {
				right = mid;
			}
		}
		for (int i = 0; i < k; i++) {
			if (right > array.length - 1
					|| left >= 0 && (Math.abs(array[left] - target) < Math.abs(array[right] - target))) {
				result[i] = array[left--];
			} else {
				result[i] = array[right++];
			}
		}
		return result;
	}

	public static void main(String[] args) {
		KClosest ob = new KClosest();
		int[] array = { 12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56 };
		int target = 35;
		int k = 4;
		ob.kClosest(array, target, k);
		System.out.println(Arrays.toString(ob.kClosest(array, target, k)));
	}
}


time = O(log(n)+k)
