package laioffer;

import java.util.Deque;
import java.util.LinkedList;

//Enhance the stack implementation to support min() operation. min() 
//should return the current minimum value in the stack. If the stack is empty, min() 
//		should return -1.
//pop() - remove and return the top element, if the stack is empty, return -1
//
//push(int element) - push the element to top
//top() - return the top element without remove it, if the stack is empty, return -1
//min() - return the current min value in the stack.

public class StackMin {
//dequeue means removing the front item.
	private Deque<Integer> stack;
	private Deque<Integer> minStack;

	public StackMin() {
		stack = new LinkedList<Integer>();
		minStack = new LinkedList<Integer>();
			   
			  }

	public Integer min() {
		if (minStack.isEmpty()) {
			return -1;
		}
		return minStack.peekFirst();
	}

	public void push(int element) {
		stack.offerFirst(element);
		if (minStack.isEmpty() || element <= minStack.peekFirst()) {
			minStack.offerFirst(element);

		}
	}

	public Integer pop() {
		if (stack.isEmpty()) {
			return -1;
		}
		Integer result = stack.pollFirst();
		if (minStack.peekFirst().equals(result)) {
			minStack.pollFirst();
		}
		return result;

	}

	public Integer top() {

		if (stack.isEmpty()) {
			return -1;
		}
		return stack.peekFirst();
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		StackMin s = new StackMin();
		s.push(-1);
		s.push(4);
		s.push(2);
		s.push(5);
		s.push(3);
		
		System.out.println(s.top());
		s.pop();
		System.out.println(s.top());
		System.out.println(s.min());
	}

}

time=O(1)
space=O(n)
