//Description
//Given a set of characters represented by a String, return a list containing all subsets of the characters.

//Assumptions

//There are no duplicate characters in the original set.
//​Examples

//Set = "abc", all the subsets are [“”, “a”, “ab”, “abc”, “ac”, “b”, “bc”, “c”]
//Set = "", all the subsets are [""]
//Set = null, all the subsets are []

public class Solution {
  public List<String> subSets(String set) {
    List<String> result = new ArrayList<String>();
    if (set == null){
      return result;
    }
    char[] arraySet = set.toCharArray();
    StringBuilder sp = new StringBuilder();
    findSubset(arraySet, 0, sp, result);
    return result;
  }  
    private void findSubset(char[] input, int index, StringBuilder solutionPrefix, List<String> result) {
      if (index == input.length){
        result.add(solutionPrefix.toString());
        return;
      }
      findSubset(input, index+1, solutionPrefix, result);
      
      solutionPrefix.append(input[index]);
      findSubset(input, index+1, solutionPrefix, result);
      solutionPrefix.deleteCharAt(solutionPrefix.length() -1);
    
    }
  }
time = O(n^2)
