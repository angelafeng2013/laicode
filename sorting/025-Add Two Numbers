//You are given two linked lists representing two non-negative numbers. 
//The digits are stored in reverse order and each of their nodes contain a single digit. 
//Add the two numbers and return it as a linked list.

//Example

//Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)

//Output: 7 -> 0 -> 8

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    // Write your solution here
    ListNode prev = new ListNode(0);
    ListNode head = prev;
    int carry = 0;
    
    while(l1 != null || l2 != null || carry != 0){
      ListNode cur = new ListNode(0);
      int sum = carry + ((l1 != null)? l1.value : 0) + 
        ((l2 != null)? l2.value : 0);
      cur.value = sum % 10;
      carry = sum /10;
      prev.next = cur;
      prev = cur;
      
      l1 = (l1 == null) ? l1 : l1.next;
      l2 = (l2 == null) ? l2 : l2.next;
      
    }
    return head.next;
  }
}
time = O(m + n)
