//Reorder the given singly-linked list N1 -> N2 -> N3 -> N4 -> … -> Nn -> null to be N1- > Nn -> N2 -> Nn-1 -> N3 -> Nn-2 -> … -> null

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public ListNode reorder(ListNode head) {
    // Write your solution here
    if(head == null || head.next == null) {
       return head;
    }
    ListNode middle = findMiddle(head);
    ListNode one = head;
    ListNode two = middle.next;
    middle.next = null;
    return mergeTwoList(one, reverse(two));
  }   
    private ListNode findMiddle(ListNode head){
      
      ListNode fast = head, slow = head;
      while (fast != null && fast.next != null){
        fast = fast.next.next;
        slow = slow.next;
      }
      return slow;
    }
    private ListNode reverse(ListNode head){
      ListNode prev = null, cur = head, next = null;
      while(cur != null){
        next = cur.next;
        cur.next = prev;
        prev = cur;
        cur = next;
      }
      return prev;
    }
    private ListNode mergeTwoList(ListNode one, ListNode two){
      ListNode dummy = new ListNode(0);
      ListNode cur = dummy;
      while(one != null && two != null){
        
          cur.next = one;
          one= one.next;
          cur.next.next = two;
          two = two.next;
          cur = cur.next.next;
      }
      if(one != null){
        cur.next = one;
      }else{
        cur.next = two;
      }
      return dummy.next;
      
      
    }
    
      
    
  }

