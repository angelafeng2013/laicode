//Determine whether an integer is a palindrome.
/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public boolean isPalindrome(ListNode head) {
    if(head == null || head.next == null){
      return true;
    }
    ListNode mid = findMid(head);
    ListNode second = reverse(mid);
    return compareTwoLists(head,second);
    
    
  }
  private ListNode findMid(ListNode head) {
    // Write your solution here
    if(head == null || head.next == null){
      return head;
    }
    ListNode fast = head, slow = head;
    while(fast != null && fast.next != null){
      fast = fast.next.next;
      slow = slow.next;
    }
    return slow;
    
  }
  private ListNode reverse(ListNode head){
    if(head == null || head.next == null){
      return head;
    }
    ListNode prev = null, cur = head, next = null;
    while(cur != null){
      next = cur.next;
      cur.next = prev;
      prev = cur;
      cur = next;
    }
    return prev;
  }
  private boolean compareTwoLists(ListNode one, ListNode two){
    while(two != null){
      if(one.value != two.value){
        return false;
      }
      one = one.next;
      two = two.next;
    }
    return true;
  }
}
 O(N) time and O(1) space
